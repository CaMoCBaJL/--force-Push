@page "/goodInfo/{goodId}"
@inherits IndexBase
@inject Data.Repository.IRepository repository;
@using System.IO;
@using System.Drawing;

@if (goodId == "newProducer")
        {
            switch (addCondition)
            {
                case 0:
            <div class="addCondition_0">
                Имя производителя не задано!
            </div>
                    break;
                case 1:
            <div class="addCondition_1">
                Производитель с таким именем уже есть в базе!
            </div>
                    break;
                case 2:
            <div class="addCondition_2">
                Добавленеи производителя прошло успешно!
            </div>
            break;
            }
    <h6>
        Введите название производителя
        <input @bind="newProducerName"/>
    </h6>
    <h6>
        Добавьте описание производителя.<textarea class="text-info" cols="100" rows="15" @bind="newProducerInfo" />
    </h6>
    <h6>
        <button class="button1" @onclick="AddProducer">
            Добавить производителя
        </button>
    </h6>
}
else if (goodId == "newPage")
{
    switch (addCondition)
    {
        case 0:
            <div class="addCondition_0">
                Не заданы значения для некоторых полей!
            </div>
            break;
        case 1:
            <div class="addCondition_1">
                Такой товар уже существует в базе!
            </div>
            break;
        case 2:
            <div class="addCondition_2">
                Добавление товара прошло успешно!
            </div>
            break;
    }
<h6>
    Выберите изображение товара
    <InputFile OnChange="AddNewImg"> </InputFile>
    @if (newImgPath != null)
    {
        <img src="/Images/@newImgPath" width="500" height="500" />
    }
</h6>
<h6>
    Введите название товара <input @bind ="newGoodName" />
</h6>
    <h6>
        Введите цену товара <input @bind="newGoodPrice" />
    </h6>
    <h6>
        Выберите производителя
        <select @bind="newProducerId">
            @foreach (var item in producers)
            {
                <option class="custom-select" value="@item.Id"> @item.ProducerName </option>
            }
        </select>
    </h6>
    <h6>
        Введите количество товара <input @bind="newAmount" />
    </h6>
    <h6>
        Добавьте описание товара<textarea class="text-info" cols="100" rows="15" @bind="newGoodInfo" />
    </h6>
    <h6>
        <button class ="button1" @onclick="AddGood">
            Добавить товар
        </button>
    </h6>
}
else
{
    <p align="center"> <img src="/Images/@(goodId + ".jpg")" height="300" width="300" /> </p>
    <p align="left">
        <h4> @curGood.GoodName, @producers.ElementAt(curGood.GoodProducerId - 1).ProducerName </h4>
        @if (curUser != null)
        {
            @if (curUser.IsAdmin)
            {
                <h6>
                    <button @onclick="ChangeGoodPrice" class="admin_button"> Изменить цену продукта </button>
                    <input @bind="newGoodPrice" />
                </h6>
                <h6>
                    <button @onclick="ChangeGoodProducer" class="admin_button"> Изменить производителя продукта </button>
                    <select @bind="newProducerId">
                        @foreach (var item in producers)
                        {
                            <option class="custom-select" value="@item.Id"> @item.ProducerName </option>
                        }
                    </select>
                </h6>
                <h6>
                    <button @onclick="ChangeGoodAmount" class="admin_button"> Изменить количество</button>
                    <input @bind="newAmount" />
                </h6>
                <h6>
                    <button @onclick="ChangeGoodInfo" class="admin_button"> Редактировать описание товара</button>
                    <textarea class="text-info" cols="100" rows="15" @bind="newGoodInfo" />
                </h6>
            }
            else
            {
                <h6> Цена - @curGood.GoodPrice </h6>
                @if (curGood.GoodStackAmount > 0)
                {
    <h6> Есть в наличии (@curGood.GoodStackAmount) </h6>
                }
                else
                {
                    <h6> Нет в наличии</h6>
                }
                <h6> @curGood.GoodInfo </h6>
            }
        }
        else
        {
            <h6> Цена - @curGood.GoodPrice </h6>
            @if (curGood.GoodStackAmount > 0)
            {
    <h6> Есть в наличии (@curGood.GoodStackAmount)</h6>
            }
            else
            {
                <h6> Нет в наличии</h6>
            }
            <h6> @curGood.GoodInfo </h6>
        }
    </p>
}
@code {
    [Parameter] public string goodId { get; set; }
    public IEnumerable<Good> goods = new List<Good>();
    public IEnumerable<Producer> producers = new List<Producer>();
    private User curUser;
    public Good curGood;
    private string newGoodName;
    private uint newGoodPrice;
    private uint newAmount;
    private string newGoodInfo;
    private int newProducerId;
    private string newImgPath;
    private byte addCondition = 255;
    private string newProducerName;
    private string newProducerInfo;

    protected override void OnInitialized()
    {
        goods = repository.GetAllGoods();
        producers = repository.GetAllProducers();
        foreach (var item in repository.GetAllUsers())
        {
            if (item.L0gin == Service.userName && item.Passwrd == Service.password)
                curUser = item;
        }
        if (goodId != "newPage" && goodId != "newProducer")
        {
            curGood = goods.ElementAt(int.Parse(goodId));
            newGoodPrice = (uint)curGood.GoodPrice;
            newAmount = (uint)curGood.GoodStackAmount;
            newGoodInfo = curGood.GoodInfo;
            newProducerId = curGood.GoodProducerId;
        }
        if(goodId == "newPage")
        {
            curGood = null;
            newGoodPrice = 0;
            newAmount = 0;
            newGoodInfo = "Описание товара отсутствует.";
            newProducerId = producers.ElementAt(0).Id;
        }
        if (goodId == "newProducer")
        {
            newProducerName = string.Empty;
            newProducerInfo = "Описание производителя отсутствует.";
        }
        newImgPath = null;
    }

    async Task AddNewImg(InputFileChangeEventArgs args)
    {
        var newImg = await args.File.RequestImageFileAsync("image", 2000, 2000);
        var buffer = new byte[newImg.Size];
        await newImg.OpenReadStream(uint.MaxValue).ReadAsync(buffer);
        var str = new DirectoryInfo("./wwwroot/Images").GetFiles().Last().Name;
        var str1 = ("./wwwroot/Images/" + (int.Parse(str.Substring(0, str.Length - 4)) + 1).ToString() + str.Substring(str.Length - 4, 4));
        using (Bitmap b = (Bitmap)new ImageConverter().ConvertFrom(buffer))
            b.Save(str1);
        newImgPath = new DirectoryInfo("./wwwroot/Images").GetFiles().Last().Name;
    }

    void AddProducer()
    {
        if (string.IsNullOrEmpty(newProducerName) || string.IsNullOrWhiteSpace(newProducerName) || string.IsNullOrEmpty(newProducerInfo) || string.IsNullOrWhiteSpace(newProducerInfo) 
            || newProducerInfo == "Описание производителя отсутствует.")
        {
            addCondition = 0;
        }
        else
        {
            Producer pD = new Producer() { ProducerName = newProducerName, ProducerInfo = newProducerInfo };
            foreach (var producer in producers)
            {
                if (producer.ProducerName == pD.ProducerName)
                {
                    addCondition = 1;
                    return;
                }
            }
            addCondition = 2;
            repository.AddProducer(pD);
        }
    }

    void AddGood()
    {
        if (newGoodPrice == 0 || newAmount == 0 || newGoodInfo == "Описание товара отсутсвует" || string.IsNullOrWhiteSpace(newGoodInfo) || string.IsNullOrEmpty(newGoodInfo) ||
            string.IsNullOrWhiteSpace(newGoodName) || string.IsNullOrEmpty(newGoodName) || string.IsNullOrEmpty(newImgPath))
        {
            addCondition = 0;
        }
        else
        {
            Good newGood = new Good()
            {
                GoodInfo = newGoodInfo,
                GoodName = newGoodName,
                GoodPrice = (int)newGoodPrice,
                GoodProducerId = newProducerId,
                GoodStackAmount = (int)newAmount
            };
            foreach (var good in goods)
            {
                if (good.GoodName == newGoodName && good.GoodProducerId == newProducerId)
                {
                    addCondition = 1;
                    return;
                }
            }
            repository.AddGood(newGood);
            addCondition = 2;
        }
    }

    void ChangeGoodProducer()
    {
        curGood.GoodProducerId = newProducerId;
        repository.GoodChanged(curGood);
    }

    void ChangeGoodInfo()
    {
        curGood.GoodInfo = newGoodInfo;
        repository.GoodChanged(curGood);
    }

    void ChangeGoodAmount()
    {
        curGood.GoodStackAmount = (int)newAmount;
        repository.GoodChanged(curGood);
    }

    void PriceChanged(ChangeEventArgs args)
    {
        double newValue;
        if (double.TryParse(args.Value.ToString(), out newValue))
            if (newValue > 1)
                newGoodPrice = (uint)newValue;
    }

    private void ChangeGoodPrice()
    {
        if (newGoodPrice > 1)
        {
            curGood.GoodPrice = (int)newGoodPrice;
            repository.GoodChanged(curGood);
        }
    }

}
