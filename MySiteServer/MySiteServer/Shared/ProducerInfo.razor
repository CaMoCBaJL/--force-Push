@page "/prodInfo/{prodId}"
@inherits IndexBase;
@inject Data.Repository.IRepository repository;

@if(UserExistsAndAdmin())
{ 
    <h6>
        <button class="admin_button" @onclick="ChangeProducerName"> Изменить название производителя </button>
        <input @bind=" newProducerName" />
    </h6>
    <h6>
        <button class="admin_button" @onclick="ChangeProducerInfo"> Изменить описание производителя </button>
        <textarea class="text-info" cols="10" rows="15" @bind=" newProducerInfo" />
    </h6>
    <p>
        Все товары производителя @producer.ProducerName
        @for (int i = 0; i < goods.Count(); i++)
        {
            var j = i;
            <h1>
                @if (goods.ElementAt(j).GoodProducerId == int.Parse(prodId) + 1)
                {
                    <a href="goodInfo/@j">
                        @goods.ElementAt(j).GoodName
                    </a>
                }

            </h1>
        }
    </p>
}
else
{
    <p>
        Все товары производителя @producer.ProducerName
        @for (int i = 0; i < goods.Count(); i++)
        {
            var j = i;
            <h1>
                @if (goods.ElementAt(j).GoodProducerId == int.Parse(prodId) + 1)
                {
                    <a href="goodInfo/@j">
                        @goods.ElementAt(j).GoodName
                    </a>
                }

            </h1>
        }
        @producer.ProducerInfo
    </p>
}
@code {
    [Parameter] public string prodId { get; set; }
    IEnumerable<Good> goods = new List<Good>();
    IEnumerable<User> users = new List<User>();
    Producer producer;
    List<string> imgFiles;
    List<uint> inputValues;
    User curUser;
    string newProducerName;
    string newProducerInfo;

    protected override void OnInitialized()
    {
        users = repository.GetAllUsers();
        goods = repository.GetAllGoods();
        producer = repository.GetAllProducers().Where(p => p.Id == int.Parse(prodId) + 1).First();
        imgFiles = new List<string>();
        if (!string.IsNullOrEmpty(Service.password) && !string.IsNullOrWhiteSpace(Service.password) && !string.IsNullOrEmpty(Service.userName) && !string.IsNullOrWhiteSpace(Service.userName))
            curUser = repository.GetAllUsers().Where(u => u.L0gin == Service.userName && u.Passwrd == Service.password).First();
        newProducerName = producer.ProducerName;
        newProducerInfo = producer.ProducerInfo;
    }

    void ChangeProducerName()
    {
        if (!string.IsNullOrEmpty(newProducerName) && !string.IsNullOrWhiteSpace(newProducerName))
        {
            producer.ProducerName = newProducerName;
            repository.ProducerInfoChanged(producer);
        }
    }

    void ChangeProducerInfo()
    {
        if (!string.IsNullOrWhiteSpace(newProducerInfo) && !string.IsNullOrEmpty(newProducerInfo))
        {
            producer.ProducerInfo = newProducerInfo;
            repository.ProducerInfoChanged(producer);
        }
    }

    private bool UserExistsAndAdmin()
    {
        if (!string.IsNullOrWhiteSpace(Service.userName) && !string.IsNullOrWhiteSpace(Service.password) &&
            !string.IsNullOrEmpty(Service.userName) && !string.IsNullOrEmpty(Service.password))
            for (int i = 0; i < users.Count(); i++)
            {
                if (users.ElementAt(i).L0gin == Service.userName && users.ElementAt(i).Passwrd == Service.password)
                {
                    curUser = users.ElementAt(i);
                    if(curUser.IsAdmin)
                        return true;
                }
            }
        return false;
    }
}
