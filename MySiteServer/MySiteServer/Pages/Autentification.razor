@page "/aut"
@inject Data.Repository.IRepository repository;
@inherits IndexBase




@if (!UserExists())
{
    <p>
        <h3>Вход</h3>
        Введите логин:
    <p><input @bind=@Service.userName /> </p>
    Введите пароль:
    <p><input @bind=@Service.password /> </p>

    <button @onclick=@ChangeLoginAndPassword> Вход </button>
    </p>
}

else
{
    <p>
        <div class="user_cart_style">
            <h1>Здравствуйте, @user.UserName! </h1>
        </div>
        @if (user.UserCart == null)
        {
            <h1> Корзина пуста</h1>
        }
        else
        {
            <div class="user_cart_style">
                <h2>Покупки:</h2>
            </div>
            foreach (var item in user.UserCart.Split())
            {
                (int id, int count) goodInfo;
                goodInfo.id = int.Parse(item.Split('*')[0]);
                goodInfo.count = int.Parse(item.Split('*')[1]);

        <div class=" user_cart_style">
            <p>
                <h3>@producers.ElementAt(goods.ElementAt(goodInfo.id).GoodProducerId - 1).ProducerName - @goods.ElementAt(goodInfo.id).GoodName x @goodInfo.count |
                <b> @(FinalPrice(goods.ElementAt(goodInfo.id).GoodPrice * goodInfo.count)) </b></h3>
            </p>
        </div>
            }

        <h1>
            <b> <i>  Итого: @sum </i></b> 
        </h1>
            <h3 align="rigth"><button @onclick=@UserExit> Выход </button></h3>
            }
    </p>
        }

        @code {
            private IEnumerable<Producer> producers = new List<Producer>();
            private IEnumerable<Good> goods = new List<Good>();
            private IEnumerable<User> users = new List<User>();
            public User user;
            private int sum;

            public bool f;
            public bool g;
            public bool h;

            protected override void OnInitialized()
            {
                producers = repository.GetAllProducers();
                goods = repository.GetAllGoods();
                users = repository.GetAllUsers();
                user = new User();
            }

            private int FinalPrice(int newTerm)
            {
                sum += newTerm;
                return newTerm;
            }

            private void UserExit()
            {
                Service.userName = null;
                Service.password = null;
            }

            private void ChangeLoginAndPassword()
            {
                if (Service.userName is not null && Service.password is not null)
                {
                    user.UserName = Service.userName;
                    user.Passwrd = Service.password;
                }
            }
            private bool UserExists()
            {
                if (!string.IsNullOrWhiteSpace(Service.userName) && !string.IsNullOrWhiteSpace(Service.password) &&
                    !string.IsNullOrEmpty(Service.userName) && !string.IsNullOrEmpty(Service.password))
                    for (int i = 0; i < users.Count(); i++)
                    {
                        if (users.ElementAt(i).L0gin == Service.userName && users.ElementAt(i).Passwrd == Service.password)
                        {
                            user = users.ElementAt(i);
                            return true;
                        }
                    }
                return false;
            }
        }
