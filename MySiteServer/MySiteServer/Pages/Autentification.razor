@page "/aut"
@inject Data.Repository.IRepository repository;
@inherits IndexBase
@using System.Text;




@if (!UserExists())
{
    <p>
        @if (!string.IsNullOrWhiteSpace(Service.userName) && !string.IsNullOrWhiteSpace(Service.password) &&
     !string.IsNullOrEmpty(Service.userName) && !string.IsNullOrEmpty(Service.password))
        {
            <div class="addCondition_0">
                Пользователь с такими данными не найден в базе.
                <a href="reg" class="registration"> Регистрация </a>
            </div>
        }
        <h3>Вход</h3>
        Введите логин:
    <p><input @bind=@Service.userName /> </p>
    Введите пароль:
    <p><input @bind=@Service.password /> </p>

    <button @onclick=@ChangeLoginAndPassword> Вход </button>
    <h6 align="rigth"><a href="reg/addUser" class="registration"> Регистрация </a></h6>

    </p>
}

else
{
    <p>
                <h1>
                    <div class="user_cart_style">
                            Здравствуйте, @user.UserName!
                    </div>
                </h1>
                <h3>
                    <form action="reg/@user.UserId">
                        <button class="admin_button"> Редактировать информацию</button>
                    </form>
                </h3>
        @if (user.IsAdmin)
        {
        <p>
            @foreach (var item in users)
            {

                <h6>
                    <a href="usr/@(item.UserId - 1)">
                        @item.UserName
                    </a>
                </h6>
            }
        </p>
    }
    else
    {
        @if (string.IsNullOrEmpty(user.UserCart))
        {
            <h1> Корзина пуста</h1>
        }
        else
        {
            <div class="user_cart_style">
                <h2>Покупки:</h2>
            </div>
            foreach (var item in user.UserCart.Split())
            {
                (int id, int count) goodInfo;
                goodInfo.id = int.Parse(item.Split('*')[0]);
                goodInfo.count = int.Parse(item.Split('*')[1]);

                <p>
                    <div class=" user_cart_style">
                        <h3>
                            @producers.ElementAt(goods.ElementAt(goodInfo.id).GoodProducerId - 1).ProducerName - @goods.ElementAt(goodInfo.id).GoodName x @goodInfo.count |
                            <b> @(FinalPrice(goods.ElementAt(goodInfo.id).GoodPrice * goodInfo.count)) </b>
                        </h3>
                    </div>
                    <button class="button0" @onclick="() => Delete_Click(item, goods.ElementAt(goodInfo.id).GoodName)"> Удалить предмет из корзины?</button>
                </p>
                <p></p>
            }
            <h1>
                <b>  Итого: @sum </b>
                <button class="button0" @onclick="BuyItems"> Купить</button>
            </h1>
        }
    }

        <h3 align="rigth"><button class="button0" @onclick=@UserExit> Выход </button></h3>

        </p>

    }

@code {
    private IEnumerable<Producer> producers = new List<Producer>();
    private IEnumerable<Good> goods = new List<Good>();
    private IEnumerable<User> users = new List<User>();
    public User user;
    private int sum;
    bool registration;

    public bool f;
    public bool g;
    public bool h;

    protected override void OnInitialized()
    {
        producers = repository.GetAllProducers();
        goods = repository.GetAllGoods();
        users = repository.GetAllUsers();
        user = new User();
        sum = 0;
    }

    void Registration()
    {
        registration = true;
    }

    void BuyItems()
    {
        (int goodId, int goodAmount) goodInfo;
        foreach (var item in user.UserCart.Split())
        {
            goodInfo.goodId = int.Parse(item.Split('*')[0]);
            goodInfo.goodAmount = int.Parse(item.Split('*')[1]);
            goods.ElementAt(goodInfo.goodId).GoodStackAmount = goods.ElementAt(goodInfo.goodId).GoodStackAmount - goodInfo.goodAmount;
            repository.GoodChanged(goods.ElementAt(goodInfo.goodId));
        }
        user.UserCart = null;
        repository.UserInfoChanged(user);
    }

    protected void Delete_Click(string item, string goodName)
    {
        var collection = user.UserCart.Split().Cast<string>().ToList();
        collection.Remove(item);
        var newStr = new StringBuilder();
        foreach (var elem in collection)
        {
            newStr.Append(elem + " ");
        }
        if (string.IsNullOrEmpty(newStr.ToString()))
            user.UserCart = null;
        else
        {
            newStr.Remove(newStr.Length - 1, 1);
            user.UserCart = newStr.ToString();
        }
        repository.UserInfoChanged(user);

    }

    private int FinalPrice(int newTerm)
    {
        sum += newTerm;
        return newTerm;
    }

    private void UserExit()
    {
        Service.userName = null;
        Service.password = null;
        sum = 0;
    }

    private void ChangeLoginAndPassword()
    {
        if (Service.userName is not null && Service.password is not null)
        {
            user.UserName = Service.userName;
            user.Passwrd = Service.password;
        }
    }
    private bool UserExists()
    {
        if (!string.IsNullOrWhiteSpace(Service.userName) && !string.IsNullOrWhiteSpace(Service.password) &&
            !string.IsNullOrEmpty(Service.userName) && !string.IsNullOrEmpty(Service.password))
            for (int i = 0; i < users.Count(); i++)
            {
                if (users.ElementAt(i).L0gin == Service.userName && users.ElementAt(i).Passwrd == Service.password)
                {
                    user = users.ElementAt(i);
                    sum = 0;
                    return true;
                }
            }
        return false;
    }
}
