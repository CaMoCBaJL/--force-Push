// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace MySiteServer.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Анотон\source\repos\MySiteServer\MySiteServer\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Анотон\source\repos\MySiteServer\MySiteServer\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Анотон\source\repos\MySiteServer\MySiteServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Анотон\source\repos\MySiteServer\MySiteServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Анотон\source\repos\MySiteServer\MySiteServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Анотон\source\repos\MySiteServer\MySiteServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Анотон\source\repos\MySiteServer\MySiteServer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Анотон\source\repos\MySiteServer\MySiteServer\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Анотон\source\repos\MySiteServer\MySiteServer\_Imports.razor"
using MySiteServer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Анотон\source\repos\MySiteServer\MySiteServer\_Imports.razor"
using MySiteServer.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Анотон\source\repos\MySiteServer\MySiteServer\Shared\GoodInfo.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Анотон\source\repos\MySiteServer\MySiteServer\Shared\GoodInfo.razor"
using System.Drawing;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/goodInfo/{goodId}")]
    public partial class GoodInfo : IndexBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 155 "C:\Users\Анотон\source\repos\MySiteServer\MySiteServer\Shared\GoodInfo.razor"
       
    [Parameter] public string goodId { get; set; }
    public IEnumerable<Good> goods = new List<Good>();
    public IEnumerable<Producer> producers = new List<Producer>();
    private User curUser;
    public Good curGood;
    private string newGoodName;
    private uint newGoodPrice;
    private uint newAmount;
    private string newGoodInfo;
    private int newProducerId;
    private string newImgPath;
    private byte addCondition = 255;
    private string newProducerName;
    private string newProducerInfo;

    protected override void OnInitialized()
    {
        goods = repository.GetAllGoods();
        producers = repository.GetAllProducers();
        foreach (var item in repository.GetAllUsers())
        {
            if (item.L0gin == Service.userName && item.Passwrd == Service.password)
                curUser = item;
        }
        if (goodId != "newPage" && goodId != "newProducer")
        {
            curGood = goods.ElementAt(int.Parse(goodId));
            newGoodPrice = (uint)curGood.GoodPrice;
            newAmount = (uint)curGood.GoodStackAmount;
            newGoodInfo = curGood.GoodInfo;
            newProducerId = curGood.GoodProducerId;
        }
        if(goodId == "newPage")
        {
            curGood = null;
            newGoodPrice = 0;
            newAmount = 0;
            newGoodInfo = "Описание товара отсутствует.";
            newProducerId = producers.ElementAt(0).Id;
        }
        if (goodId == "newProducer")
        {
            newProducerName = string.Empty;
            newProducerInfo = "Описание производителя отсутствует.";
        }
        newImgPath = null;
    }

    async Task AddNewImg(InputFileChangeEventArgs args)
    {
        var newImg = await args.File.RequestImageFileAsync("image", 2000, 2000);
        var buffer = new byte[newImg.Size];
        await newImg.OpenReadStream(uint.MaxValue).ReadAsync(buffer);
        var str = new DirectoryInfo("./wwwroot/Images").GetFiles().Last().Name;
        var str1 = ("./wwwroot/Images/" + (int.Parse(str.Substring(0, str.Length - 4)) + 1).ToString() + str.Substring(str.Length - 4, 4));
        using (Bitmap b = (Bitmap)new ImageConverter().ConvertFrom(buffer))
            b.Save(str1);
        newImgPath = new DirectoryInfo("./wwwroot/Images").GetFiles().Last().Name;
    }

    void AddProducer()
    {
        if (string.IsNullOrEmpty(newProducerName) || string.IsNullOrWhiteSpace(newProducerName) || string.IsNullOrEmpty(newProducerInfo) || string.IsNullOrWhiteSpace(newProducerInfo) 
            || newProducerInfo == "Описание производителя отсутствует.")
        {
            addCondition = 0;
        }
        else
        {
            Producer pD = new Producer() { ProducerName = newProducerName, ProducerInfo = newProducerInfo };
            foreach (var producer in producers)
            {
                if (producer.ProducerName == pD.ProducerName)
                {
                    addCondition = 1;
                    return;
                }
            }
            addCondition = 2;
            repository.AddProducer(pD);
        }
    }

    void AddGood()
    {
        if (newGoodPrice == 0 || newAmount == 0 || newGoodInfo == "Описание товара отсутсвует" || string.IsNullOrWhiteSpace(newGoodInfo) || string.IsNullOrEmpty(newGoodInfo) ||
            string.IsNullOrWhiteSpace(newGoodName) || string.IsNullOrEmpty(newGoodName) || string.IsNullOrEmpty(newImgPath))
        {
            addCondition = 0;
        }
        else
        {
            Good newGood = new Good()
            {
                GoodInfo = newGoodInfo,
                GoodName = newGoodName,
                GoodPrice = (int)newGoodPrice,
                GoodProducerId = newProducerId,
                GoodStackAmount = (int)newAmount
            };
            foreach (var good in goods)
            {
                if (good.GoodName == newGoodName && good.GoodProducerId == newProducerId)
                {
                    addCondition = 1;
                    return;
                }
            }
            repository.AddGood(newGood);
            addCondition = 2;
        }
    }

    void ChangeGoodProducer()
    {
        curGood.GoodProducerId = newProducerId;
        repository.GoodChanged(curGood);
    }

    void ChangeGoodInfo()
    {
        curGood.GoodInfo = newGoodInfo;
        repository.GoodChanged(curGood);
    }

    void ChangeGoodAmount()
    {
        curGood.GoodStackAmount = (int)newAmount;
        repository.GoodChanged(curGood);
    }

    void PriceChanged(ChangeEventArgs args)
    {
        double newValue;
        if (double.TryParse(args.Value.ToString(), out newValue))
            if (newValue > 1)
                newGoodPrice = (uint)newValue;
    }

    private void ChangeGoodPrice()
    {
        if (newGoodPrice > 1)
        {
            curGood.GoodPrice = (int)newGoodPrice;
            repository.GoodChanged(curGood);
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Data.Repository.IRepository repository { get; set; }
    }
}
#pragma warning restore 1591
